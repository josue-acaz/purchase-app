{"version":3,"sources":["webpack:///src/app/core/wrapper/wrapper.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC;AACtC;AACA,KAAK,OAAO;AACZ;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAiD,WAAW;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB,qBAAqB,qBAAqB;AAC5D;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,2CAA2C,6CAA6C;AACxF;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,wBAAwB;AACxB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gDAAgD,GAAG;AACnD;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;;AAEL;;AAEA,CAAC,G","file":"scripts.js","sourcesContent":["/**\n * This library was created to emulate some jQuery features\n * used in this template only with Javascript and DOM\n * manipulation functions (IE10+).\n * All methods were designed for an adequate and specific use\n * and don't perform a deep validation on the arguments provided.\n *\n * IMPORTANT:\n * ==========\n * It's suggested NOT to use this library extensively unless you\n * understand what each method does. Instead, use only JS or\n * you might even need jQuery.\n */\n\n(function(global, factory) {\n    if (typeof exports === 'object') { // CommonJS-like\n        module.exports = factory();\n    } else { // Browser\n        if (typeof global.jQuery === 'undefined')\n            global.$ = factory();\n    }\n}(this, function() {\n\n    // HELPERS\n    function arrayFrom(obj) {\n        return ('length' in obj) && (obj !== window) ? [].slice.call(obj) : [obj];\n    }\n\n    function filter(ctx, fn) {\n        return [].filter.call(ctx, fn);\n    }\n\n    function map(ctx, fn) {\n        return [].map.call(ctx, fn);\n    }\n\n    function matches(item, selector) {\n        return (Element.prototype.matches || Element.prototype.msMatchesSelector).call(item, selector)\n    }\n\n    // Events handler with simple scoped events support\n    var EventHandler = function() {\n        this.events = {};\n    }\n    EventHandler.prototype = {\n        // event accepts: 'click' or 'click.scope'\n        bind: function(event, listener, target) {\n            var type = event.split('.')[0];\n            target.addEventListener(type, listener, false);\n            this.events[event] = {\n                type: type,\n                listener: listener\n            }\n        },\n        unbind: function(event, target) {\n            if (event in this.events) {\n                target.removeEventListener(this.events[event].type, this.events[event].listener, false);\n                delete this.events[event];\n            }\n        }\n    }\n\n    // Object Definition\n    var Wrap = function(selector) {\n        this.selector = selector;\n        return this._setup([]);\n    }\n\n    // CONSTRUCTOR\n    Wrap.Constructor = function(param, attrs) {\n        var el = new Wrap(param);\n        return el.init(attrs);\n    };\n\n    // Core methods\n    Wrap.prototype = {\n        constructor: Wrap,\n        /**\n         * Initialize the object depending on param type\n         * [attrs] only to handle $(htmlString, {attributes})\n         */\n        init: function(attrs) {\n            // empty object\n            if (!this.selector) return this;\n            // selector === string\n            if (typeof this.selector === 'string') {\n                // if looks like markup, try to create an element\n                if (this.selector[0] === '<') {\n                    var elem = this._setup([this._create(this.selector)])\n                    return attrs ? elem.attr(attrs) : elem;\n                } else\n                    return this._setup(arrayFrom(document.querySelectorAll(this.selector)))\n            }\n            // selector === DOMElement\n            if (this.selector.nodeType)\n                return this._setup([this.selector])\n            else // shorthand for DOMReady\n                if (typeof this.selector === 'function')\n                    return this._setup([document]).ready(this.selector)\n            // Array like objects (e.g. NodeList/HTMLCollection)\n            return this._setup(arrayFrom(this.selector))\n        },\n        /**\n         * Creates a DOM element from a string\n         * Strictly supports the form: '<tag>' or '<tag/>'\n         */\n        _create: function(str) {\n            var nodeName = str.substr(str.indexOf('<') + 1, str.indexOf('>') - 1).replace('/', '')\n            return document.createElement(nodeName);\n        },\n        /** setup properties and array to element set */\n        _setup: function(elements) {\n            var i = 0;\n            for (; i < elements.length; i++) delete this[i]; // clean up old set\n            this.elements = elements;\n            this.length = elements.length;\n            for (i = 0; i < elements.length; i++) this[i] = elements[i] // new set\n            return this;\n        },\n        _first: function(cb, ret) {\n            var f = this.elements[0];\n            return f ? (cb ? cb.call(this, f) : f) : ret;\n        },\n        /** Common function for class manipulation  */\n        _classes: function(method, classname) {\n            var cls = classname.split(' ');\n            if (cls.length > 1) {\n                cls.forEach(this._classes.bind(this, method))\n            } else {\n                if (method === 'contains') {\n                    var elem = this._first();\n                    return elem ? elem.classList.contains(classname) : false;\n                }\n                return (classname === '') ? this : this.each(function(i, item) {\n                    item.classList[method](classname);\n                })\n            }\n        },\n        /**\n         * Multi purpose function to set or get a (key, value)\n         * If no value, works as a getter for the given key\n         * key can be an object in the form {key: value, ...}\n         */\n        _access: function(key, value, fn) {\n            if (typeof key === 'object') {\n                for (var k in key) {\n                    this._access(k, key[k], fn);\n                }\n            } else if (value === undefined) {\n                return this._first(function(elem) {\n                    return fn(elem, key);\n                });\n            }\n            return this.each(function(i, item) {\n                fn(item, key, value);\n            });\n        },\n        each: function(fn, arr) {\n            arr = arr ? arr : this.elements;\n            for (var i = 0; i < arr.length; i++) {\n                if (fn.call(arr[i], i, arr[i]) === false)\n                    break;\n            }\n            return this;\n        }\n    }\n\n    /** Allows to extend with new methods */\n    Wrap.extend = function(methods) {\n        Object.keys(methods).forEach(function(m) {\n            Wrap.prototype[m] = methods[m]\n        })\n    }\n\n    // DOM READY\n    Wrap.extend({\n        ready: function(fn) {\n            if (document.attachEvent ? document.readyState === 'complete' : document.readyState !== 'loading') {\n                fn();\n            } else {\n                document.addEventListener('DOMContentLoaded', fn);\n            }\n            return this;\n        }\n    })\n    // ACCESS\n    Wrap.extend({\n        /** Get or set a css value */\n        css: function(key, value) {\n            var getStyle = function(e, k) { return e.style[k] || getComputedStyle(e)[k]; };\n            return this._access(key, value, function(item, k, val) {\n                var unit = (typeof val === 'number') ? 'px' : '';\n                return val === undefined ? getStyle(item, k) : (item.style[k] = val + unit);\n            })\n        },\n        /** Get an attribute or set it */\n        attr: function(key, value) {\n            return this._access(key, value, function(item, k, val) {\n                return val === undefined ? item.getAttribute(k) : item.setAttribute(k, val)\n            })\n        },\n        /** Get a property or set it */\n        prop: function(key, value) {\n            return this._access(key, value, function(item, k, val) {\n                return val === undefined ? item[k] : (item[k] = val);\n            })\n        },\n        position: function() {\n            return this._first(function(elem) {\n                return { left: elem.offsetLeft, top: elem.offsetTop }\n            });\n        },\n        scrollTop: function(value) {\n            return this._access('scrollTop', value, function(item, k, val) {\n                return val === undefined ? item[k] : (item[k] = val);\n            })\n        },\n        outerHeight: function(includeMargin) {\n            return this._first(function(elem) {\n                var style = getComputedStyle(elem);\n                var margins = includeMargin ? (parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10)) : 0;\n                return elem.offsetHeight + margins;\n            });\n        },\n        /**\n         * Find the position of the first element in the set\n         * relative to its sibling elements.\n         */\n        index: function() {\n            return this._first(function(el) {\n                return arrayFrom(el.parentNode.children).indexOf(el)\n            }, -1);\n        }\n    })\n    // LOOKUP\n    Wrap.extend({\n        children: function(selector) {\n            var childs = [];\n            this.each(function(i, item) {\n                childs = childs.concat(map(item.children, function(item) {\n                    return item\n                }))\n            })\n            return Wrap.Constructor(childs).filter(selector);\n        },\n        siblings: function() {\n            var sibs = []\n            this.each(function(i, item) {\n                sibs = sibs.concat(filter(item.parentNode.children, function(child) {\n                    return child !== item;\n                }))\n            })\n            return Wrap.Constructor(sibs)\n        },\n        /** Return the parent of each element in the current set */\n        parent: function() {\n            var par = map(this.elements, function(item) {\n                return item.parentNode;\n            })\n            return Wrap.Constructor(par)\n        },\n        /** Return ALL parents of each element in the current set */\n        parents: function(selector) {\n            var par = [];\n            this.each(function(i, item) {\n                for (var p = item.parentElement; p; p = p.parentElement)\n                    par.push(p);\n            })\n            return Wrap.Constructor(par).filter(selector)\n        },\n        /**\n         * Get the descendants of each element in the set, filtered by a selector\n         * Selector can't start with \">\" (:scope not supported on IE).\n         */\n        find: function(selector) {\n            var found = []\n            this.each(function(i, item) {\n                found = found.concat(map(item.querySelectorAll( /*':scope ' + */ selector), function(fitem) {\n                    return fitem\n                }))\n            })\n            return Wrap.Constructor(found)\n        },\n        /** filter the actual set based on given selector */\n        filter: function(selector) {\n            if (!selector) return this;\n            var res = filter(this.elements, function(item) {\n                return matches(item, selector)\n            })\n            return Wrap.Constructor(res)\n        },\n        /** Works only with a string selector */\n        is: function(selector) {\n            var found = false;\n            this.each(function(i, item) {\n                return !(found = matches(item, selector))\n            })\n            return found;\n        }\n    });\n    // ELEMENTS\n    Wrap.extend({\n        /**\n         * append current set to given node\n         * expects a dom node or set\n         * if element is a set, prepends only the first\n         */\n        appendTo: function(elem) {\n            elem = elem.nodeType ? elem : elem._first()\n            return this.each(function(i, item) {\n                elem.appendChild(item);\n            })\n        },\n        /**\n         * Append a domNode to each element in the set\n         * if element is a set, append only the first\n         */\n        append: function(elem) {\n            elem = elem.nodeType ? elem : elem._first()\n            return this.each(function(i, item) {\n                item.appendChild(elem);\n            })\n        },\n        /**\n         * Insert the current set of elements after the element\n         * that matches the given selector in param\n         */\n        insertAfter: function(selector) {\n            var target = document.querySelector(selector);\n            return this.each(function(i, item) {\n                target.parentNode.insertBefore(item, target.nextSibling);\n            })\n        },\n        /**\n         * Clones all element in the set\n         * returns a new set with the cloned elements\n         */\n        clone: function() {\n            var clones = map(this.elements, function(item) {\n                return item.cloneNode(true)\n            })\n            return Wrap.Constructor(clones);\n        },\n        /** Remove all node in the set from DOM. */\n        remove: function() {\n            this.each(function(i, item) {\n                delete item.events;\n                delete item.data;\n                if (item.parentNode) item.parentNode.removeChild(item);\n            })\n            this._setup([])\n        }\n    })\n    // DATASETS\n    Wrap.extend({\n        /**\n         * Expected key in camelCase format\n         * if value provided save data into element set\n         * if not, return data for the first element\n         */\n        data: function(key, value) {\n            var hasJSON = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n                dataAttr = 'data-' + key.replace(/[A-Z]/g, '-$&').toLowerCase();\n            if (value === undefined) {\n                return this._first(function(el) {\n                    if (el.data && el.data[key])\n                        return el.data[key];\n                    else {\n                        var data = el.getAttribute(dataAttr)\n                        if (data === 'true') return true;\n                        if (data === 'false') return false;\n                        if (data === +data + '') return +data;\n                        if (hasJSON.test(data)) return JSON.parse(data);\n                        return data;\n                    }\n                });\n            } else {\n                return this.each(function(i, item) {\n                    item.data = item.data || {};\n                    item.data[key] = value;\n                });\n            }\n        }\n    })\n    // EVENTS\n    Wrap.extend({\n        trigger: function(type) {\n            type = type.split('.')[0]; // ignore namespace\n            var event = document.createEvent('HTMLEvents');\n            event.initEvent(type, true, false);\n            return this.each(function(i, item) {\n                item.dispatchEvent(event);\n            })\n        },\n        blur: function() {\n            return this.trigger('blur')\n        },\n        focus: function() {\n            return this.trigger('focus')\n        },\n        on: function(event, callback) {\n            return this.each(function(i, item) {\n                if (!item.events) item.events = new EventHandler();\n                event.split(' ').forEach(function(ev) {\n                    item.events.bind(ev, callback, item);\n                })\n            })\n        },\n        off: function(event) {\n            return this.each(function(i, item) {\n                if (item.events) {\n                    item.events.unbind(event, item);\n                    delete item.events;\n                }\n            })\n        }\n    })\n    // CLASSES\n    Wrap.extend({\n        toggleClass: function(classname) {\n            return this._classes('toggle', classname);\n        },\n        addClass: function(classname) {\n            return this._classes('add', classname);\n        },\n        removeClass: function(classname) {\n            return this._classes('remove', classname);\n        },\n        hasClass: function(classname) {\n            return this._classes('contains', classname);\n        }\n    })\n\n    return Wrap.Constructor\n\n}));"],"sourceRoot":""}